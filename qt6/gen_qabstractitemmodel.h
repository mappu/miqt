#pragma once
#ifndef MIQT_QT6_GEN_QABSTRACTITEMMODEL_H
#define MIQT_QT6_GEN_QABSTRACTITEMMODEL_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../libmiqt/libmiqt.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
class QAbstractItemModel;
class QAbstractListModel;
class QAbstractTableModel;
class QChildEvent;
class QDataStream;
class QEvent;
class QMetaMethod;
class QMetaObject;
class QMimeData;
class QModelIndex;
class QModelRoleData;
class QModelRoleDataSpan;
class QObject;
class QPersistentModelIndex;
class QSize;
class QTimerEvent;
class QVariant;
#else
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractListModel QAbstractListModel;
typedef struct QAbstractTableModel QAbstractTableModel;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QModelRoleData QModelRoleData;
typedef struct QModelRoleDataSpan QModelRoleDataSpan;
typedef struct QObject QObject;
typedef struct QPersistentModelIndex QPersistentModelIndex;
typedef struct QSize QSize;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
#endif

QModelRoleData* QModelRoleData_new(int role);
QModelRoleData* QModelRoleData_new2(QModelRoleData* param1);
int QModelRoleData_role(const QModelRoleData* self);
QVariant* QModelRoleData_data(QModelRoleData* self);
QVariant* QModelRoleData_data2(const QModelRoleData* self);
void QModelRoleData_clearData(QModelRoleData* self);
void QModelRoleData_operatorAssign(QModelRoleData* self, QModelRoleData* param1);

void QModelRoleData_delete(QModelRoleData* self);

QModelRoleDataSpan* QModelRoleDataSpan_new();
QModelRoleDataSpan* QModelRoleDataSpan_new2(QModelRoleData* modelRoleData);
QModelRoleDataSpan* QModelRoleDataSpan_new3(QModelRoleData* modelRoleData, ptrdiff_t len);
QModelRoleDataSpan* QModelRoleDataSpan_new4(QModelRoleDataSpan* param1);
ptrdiff_t QModelRoleDataSpan_size(const QModelRoleDataSpan* self);
ptrdiff_t QModelRoleDataSpan_length(const QModelRoleDataSpan* self);
QModelRoleData* QModelRoleDataSpan_data(const QModelRoleDataSpan* self);
QModelRoleData* QModelRoleDataSpan_begin(const QModelRoleDataSpan* self);
QModelRoleData* QModelRoleDataSpan_end(const QModelRoleDataSpan* self);
QModelRoleData* QModelRoleDataSpan_operatorSubscript(const QModelRoleDataSpan* self, ptrdiff_t index);
QVariant* QModelRoleDataSpan_dataForRole(const QModelRoleDataSpan* self, int role);

void QModelRoleDataSpan_delete(QModelRoleDataSpan* self);

QModelIndex* QModelIndex_new();
QModelIndex* QModelIndex_new2(QModelIndex* param1);
int QModelIndex_row(const QModelIndex* self);
int QModelIndex_column(const QModelIndex* self);
uintptr_t QModelIndex_internalId(const QModelIndex* self);
void* QModelIndex_internalPointer(const QModelIndex* self);
const void* QModelIndex_constInternalPointer(const QModelIndex* self);
QModelIndex* QModelIndex_parent(const QModelIndex* self);
QModelIndex* QModelIndex_sibling(const QModelIndex* self, int row, int column);
QModelIndex* QModelIndex_siblingAtColumn(const QModelIndex* self, int column);
QModelIndex* QModelIndex_siblingAtRow(const QModelIndex* self, int row);
QVariant* QModelIndex_data(const QModelIndex* self);
void QModelIndex_multiData(const QModelIndex* self, QModelRoleDataSpan* roleDataSpan);
int QModelIndex_flags(const QModelIndex* self);
QAbstractItemModel* QModelIndex_model(const QModelIndex* self);
bool QModelIndex_isValid(const QModelIndex* self);
bool QModelIndex_operatorEqual(const QModelIndex* self, QModelIndex* other);
bool QModelIndex_operatorNotEqual(const QModelIndex* self, QModelIndex* other);
bool QModelIndex_operatorLesser(const QModelIndex* self, QModelIndex* other);
QVariant* QModelIndex_dataWithRole(const QModelIndex* self, int role);

void QModelIndex_delete(QModelIndex* self);

QPersistentModelIndex* QPersistentModelIndex_new();
QPersistentModelIndex* QPersistentModelIndex_new2(QModelIndex* index);
QPersistentModelIndex* QPersistentModelIndex_new3(QPersistentModelIndex* other);
bool QPersistentModelIndex_operatorLesser(const QPersistentModelIndex* self, QPersistentModelIndex* other);
bool QPersistentModelIndex_operatorEqual(const QPersistentModelIndex* self, QPersistentModelIndex* other);
bool QPersistentModelIndex_operatorNotEqual(const QPersistentModelIndex* self, QPersistentModelIndex* other);
void QPersistentModelIndex_operatorAssign(QPersistentModelIndex* self, QPersistentModelIndex* other);
void QPersistentModelIndex_swap(QPersistentModelIndex* self, QPersistentModelIndex* other);
bool QPersistentModelIndex_operatorEqualWithOther(const QPersistentModelIndex* self, QModelIndex* other);
bool QPersistentModelIndex_operatorNotEqualWithOther(const QPersistentModelIndex* self, QModelIndex* other);
void QPersistentModelIndex_operatorAssignWithOther(QPersistentModelIndex* self, QModelIndex* other);
QModelIndex* QPersistentModelIndex_ToQModelIndex(const QPersistentModelIndex* self);
int QPersistentModelIndex_row(const QPersistentModelIndex* self);
int QPersistentModelIndex_column(const QPersistentModelIndex* self);
void* QPersistentModelIndex_internalPointer(const QPersistentModelIndex* self);
const void* QPersistentModelIndex_constInternalPointer(const QPersistentModelIndex* self);
uintptr_t QPersistentModelIndex_internalId(const QPersistentModelIndex* self);
QModelIndex* QPersistentModelIndex_parent(const QPersistentModelIndex* self);
QModelIndex* QPersistentModelIndex_sibling(const QPersistentModelIndex* self, int row, int column);
QVariant* QPersistentModelIndex_data(const QPersistentModelIndex* self);
void QPersistentModelIndex_multiData(const QPersistentModelIndex* self, QModelRoleDataSpan* roleDataSpan);
int QPersistentModelIndex_flags(const QPersistentModelIndex* self);
QAbstractItemModel* QPersistentModelIndex_model(const QPersistentModelIndex* self);
bool QPersistentModelIndex_isValid(const QPersistentModelIndex* self);
QVariant* QPersistentModelIndex_dataWithRole(const QPersistentModelIndex* self, int role);

void QPersistentModelIndex_delete(QPersistentModelIndex* self);

QAbstractItemModel* QAbstractItemModel_new();
QAbstractItemModel* QAbstractItemModel_new2(QObject* parent);
void QAbstractItemModel_virtbase(QAbstractItemModel* src, QObject** outptr_QObject);
QMetaObject* QAbstractItemModel_metaObject(const QAbstractItemModel* self);
void* QAbstractItemModel_metacast(QAbstractItemModel* self, const char* param1);
struct miqt_string QAbstractItemModel_tr(const char* s);
bool QAbstractItemModel_hasIndex(const QAbstractItemModel* self, int row, int column);
QModelIndex* QAbstractItemModel_index(const QAbstractItemModel* self, int row, int column, QModelIndex* parent);
QModelIndex* QAbstractItemModel_parent(const QAbstractItemModel* self, QModelIndex* child);
QModelIndex* QAbstractItemModel_sibling(const QAbstractItemModel* self, int row, int column, QModelIndex* idx);
int QAbstractItemModel_rowCount(const QAbstractItemModel* self, QModelIndex* parent);
int QAbstractItemModel_columnCount(const QAbstractItemModel* self, QModelIndex* parent);
bool QAbstractItemModel_hasChildren(const QAbstractItemModel* self, QModelIndex* parent);
QVariant* QAbstractItemModel_data(const QAbstractItemModel* self, QModelIndex* index, int role);
bool QAbstractItemModel_setData(QAbstractItemModel* self, QModelIndex* index, QVariant* value, int role);
QVariant* QAbstractItemModel_headerData(const QAbstractItemModel* self, int section, int orientation, int role);
bool QAbstractItemModel_setHeaderData(QAbstractItemModel* self, int section, int orientation, QVariant* value, int role);
struct miqt_map /* of int to QVariant* */  QAbstractItemModel_itemData(const QAbstractItemModel* self, QModelIndex* index);
bool QAbstractItemModel_setItemData(QAbstractItemModel* self, QModelIndex* index, struct miqt_map /* of int to QVariant* */  roles);
bool QAbstractItemModel_clearItemData(QAbstractItemModel* self, QModelIndex* index);
struct miqt_array /* of struct miqt_string */  QAbstractItemModel_mimeTypes(const QAbstractItemModel* self);
QMimeData* QAbstractItemModel_mimeData(const QAbstractItemModel* self, struct miqt_array /* of QModelIndex* */  indexes);
bool QAbstractItemModel_canDropMimeData(const QAbstractItemModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
bool QAbstractItemModel_dropMimeData(QAbstractItemModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QAbstractItemModel_supportedDropActions(const QAbstractItemModel* self);
int QAbstractItemModel_supportedDragActions(const QAbstractItemModel* self);
bool QAbstractItemModel_insertRows(QAbstractItemModel* self, int row, int count, QModelIndex* parent);
bool QAbstractItemModel_insertColumns(QAbstractItemModel* self, int column, int count, QModelIndex* parent);
bool QAbstractItemModel_removeRows(QAbstractItemModel* self, int row, int count, QModelIndex* parent);
bool QAbstractItemModel_removeColumns(QAbstractItemModel* self, int column, int count, QModelIndex* parent);
bool QAbstractItemModel_moveRows(QAbstractItemModel* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractItemModel_moveColumns(QAbstractItemModel* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractItemModel_insertRow(QAbstractItemModel* self, int row);
bool QAbstractItemModel_insertColumn(QAbstractItemModel* self, int column);
bool QAbstractItemModel_removeRow(QAbstractItemModel* self, int row);
bool QAbstractItemModel_removeColumn(QAbstractItemModel* self, int column);
bool QAbstractItemModel_moveRow(QAbstractItemModel* self, QModelIndex* sourceParent, int sourceRow, QModelIndex* destinationParent, int destinationChild);
bool QAbstractItemModel_moveColumn(QAbstractItemModel* self, QModelIndex* sourceParent, int sourceColumn, QModelIndex* destinationParent, int destinationChild);
void QAbstractItemModel_fetchMore(QAbstractItemModel* self, QModelIndex* parent);
bool QAbstractItemModel_canFetchMore(const QAbstractItemModel* self, QModelIndex* parent);
int QAbstractItemModel_flags(const QAbstractItemModel* self, QModelIndex* index);
void QAbstractItemModel_sort(QAbstractItemModel* self, int column, int order);
QModelIndex* QAbstractItemModel_buddy(const QAbstractItemModel* self, QModelIndex* index);
struct miqt_array /* of QModelIndex* */  QAbstractItemModel_match(const QAbstractItemModel* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
QSize* QAbstractItemModel_span(const QAbstractItemModel* self, QModelIndex* index);
struct miqt_map /* of int to struct miqt_string */  QAbstractItemModel_roleNames(const QAbstractItemModel* self);
bool QAbstractItemModel_checkIndex(const QAbstractItemModel* self, QModelIndex* index);
void QAbstractItemModel_multiData(const QAbstractItemModel* self, QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void QAbstractItemModel_dataChanged(QAbstractItemModel* self, QModelIndex* topLeft, QModelIndex* bottomRight);
void QAbstractItemModel_connect_dataChanged(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_headerDataChanged(QAbstractItemModel* self, int orientation, int first, int last);
void QAbstractItemModel_connect_headerDataChanged(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_layoutChanged(QAbstractItemModel* self);
void QAbstractItemModel_connect_layoutChanged(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_layoutAboutToBeChanged(QAbstractItemModel* self);
void QAbstractItemModel_connect_layoutAboutToBeChanged(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_submit(QAbstractItemModel* self);
void QAbstractItemModel_revert(QAbstractItemModel* self);
void QAbstractItemModel_resetInternalData(QAbstractItemModel* self);
struct miqt_string QAbstractItemModel_tr2(const char* s, const char* c);
struct miqt_string QAbstractItemModel_tr3(const char* s, const char* c, int n);
bool QAbstractItemModel_hasIndex2(const QAbstractItemModel* self, int row, int column, QModelIndex* parent);
bool QAbstractItemModel_insertRow2(QAbstractItemModel* self, int row, QModelIndex* parent);
bool QAbstractItemModel_insertColumn2(QAbstractItemModel* self, int column, QModelIndex* parent);
bool QAbstractItemModel_removeRow2(QAbstractItemModel* self, int row, QModelIndex* parent);
bool QAbstractItemModel_removeColumn2(QAbstractItemModel* self, int column, QModelIndex* parent);
bool QAbstractItemModel_checkIndex2(const QAbstractItemModel* self, QModelIndex* index, int options);
void QAbstractItemModel_dataChanged2(QAbstractItemModel* self, QModelIndex* topLeft, QModelIndex* bottomRight, struct miqt_array /* of int */  roles);
void QAbstractItemModel_connect_dataChanged2(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_layoutChangedWithParents(QAbstractItemModel* self, struct miqt_array /* of QPersistentModelIndex* */  parents);
void QAbstractItemModel_connect_layoutChangedWithParents(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_layoutChanged2(QAbstractItemModel* self, struct miqt_array /* of QPersistentModelIndex* */  parents, int hint);
void QAbstractItemModel_connect_layoutChanged2(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_layoutAboutToBeChangedWithParents(QAbstractItemModel* self, struct miqt_array /* of QPersistentModelIndex* */  parents);
void QAbstractItemModel_connect_layoutAboutToBeChangedWithParents(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_layoutAboutToBeChanged2(QAbstractItemModel* self, struct miqt_array /* of QPersistentModelIndex* */  parents, int hint);
void QAbstractItemModel_connect_layoutAboutToBeChanged2(QAbstractItemModel* self, intptr_t slot);

bool QAbstractItemModel_override_virtual_index(void* self, intptr_t slot);
QModelIndex* QAbstractItemModel_virtualbase_index(const void* self, int row, int column, QModelIndex* parent);
bool QAbstractItemModel_override_virtual_parent(void* self, intptr_t slot);
QModelIndex* QAbstractItemModel_virtualbase_parent(const void* self, QModelIndex* child);
bool QAbstractItemModel_override_virtual_sibling(void* self, intptr_t slot);
QModelIndex* QAbstractItemModel_virtualbase_sibling(const void* self, int row, int column, QModelIndex* idx);
bool QAbstractItemModel_override_virtual_rowCount(void* self, intptr_t slot);
int QAbstractItemModel_virtualbase_rowCount(const void* self, QModelIndex* parent);
bool QAbstractItemModel_override_virtual_columnCount(void* self, intptr_t slot);
int QAbstractItemModel_virtualbase_columnCount(const void* self, QModelIndex* parent);
bool QAbstractItemModel_override_virtual_hasChildren(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_hasChildren(const void* self, QModelIndex* parent);
bool QAbstractItemModel_override_virtual_data(void* self, intptr_t slot);
QVariant* QAbstractItemModel_virtualbase_data(const void* self, QModelIndex* index, int role);
bool QAbstractItemModel_override_virtual_setData(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_setData(void* self, QModelIndex* index, QVariant* value, int role);
bool QAbstractItemModel_override_virtual_headerData(void* self, intptr_t slot);
QVariant* QAbstractItemModel_virtualbase_headerData(const void* self, int section, int orientation, int role);
bool QAbstractItemModel_override_virtual_setHeaderData(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_setHeaderData(void* self, int section, int orientation, QVariant* value, int role);
bool QAbstractItemModel_override_virtual_itemData(void* self, intptr_t slot);
struct miqt_map /* of int to QVariant* */  QAbstractItemModel_virtualbase_itemData(const void* self, QModelIndex* index);
bool QAbstractItemModel_override_virtual_setItemData(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_setItemData(void* self, QModelIndex* index, struct miqt_map /* of int to QVariant* */  roles);
bool QAbstractItemModel_override_virtual_clearItemData(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_clearItemData(void* self, QModelIndex* index);
bool QAbstractItemModel_override_virtual_mimeTypes(void* self, intptr_t slot);
struct miqt_array /* of struct miqt_string */  QAbstractItemModel_virtualbase_mimeTypes(const void* self);
bool QAbstractItemModel_override_virtual_mimeData(void* self, intptr_t slot);
QMimeData* QAbstractItemModel_virtualbase_mimeData(const void* self, struct miqt_array /* of QModelIndex* */  indexes);
bool QAbstractItemModel_override_virtual_canDropMimeData(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_canDropMimeData(const void* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
bool QAbstractItemModel_override_virtual_dropMimeData(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_dropMimeData(void* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
bool QAbstractItemModel_override_virtual_supportedDropActions(void* self, intptr_t slot);
int QAbstractItemModel_virtualbase_supportedDropActions(const void* self);
bool QAbstractItemModel_override_virtual_supportedDragActions(void* self, intptr_t slot);
int QAbstractItemModel_virtualbase_supportedDragActions(const void* self);
bool QAbstractItemModel_override_virtual_insertRows(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_insertRows(void* self, int row, int count, QModelIndex* parent);
bool QAbstractItemModel_override_virtual_insertColumns(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_insertColumns(void* self, int column, int count, QModelIndex* parent);
bool QAbstractItemModel_override_virtual_removeRows(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_removeRows(void* self, int row, int count, QModelIndex* parent);
bool QAbstractItemModel_override_virtual_removeColumns(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_removeColumns(void* self, int column, int count, QModelIndex* parent);
bool QAbstractItemModel_override_virtual_moveRows(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_moveRows(void* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractItemModel_override_virtual_moveColumns(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_moveColumns(void* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractItemModel_override_virtual_fetchMore(void* self, intptr_t slot);
void QAbstractItemModel_virtualbase_fetchMore(void* self, QModelIndex* parent);
bool QAbstractItemModel_override_virtual_canFetchMore(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_canFetchMore(const void* self, QModelIndex* parent);
bool QAbstractItemModel_override_virtual_flags(void* self, intptr_t slot);
int QAbstractItemModel_virtualbase_flags(const void* self, QModelIndex* index);
bool QAbstractItemModel_override_virtual_sort(void* self, intptr_t slot);
void QAbstractItemModel_virtualbase_sort(void* self, int column, int order);
bool QAbstractItemModel_override_virtual_buddy(void* self, intptr_t slot);
QModelIndex* QAbstractItemModel_virtualbase_buddy(const void* self, QModelIndex* index);
bool QAbstractItemModel_override_virtual_match(void* self, intptr_t slot);
struct miqt_array /* of QModelIndex* */  QAbstractItemModel_virtualbase_match(const void* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
bool QAbstractItemModel_override_virtual_span(void* self, intptr_t slot);
QSize* QAbstractItemModel_virtualbase_span(const void* self, QModelIndex* index);
bool QAbstractItemModel_override_virtual_roleNames(void* self, intptr_t slot);
struct miqt_map /* of int to struct miqt_string */  QAbstractItemModel_virtualbase_roleNames(const void* self);
bool QAbstractItemModel_override_virtual_multiData(void* self, intptr_t slot);
void QAbstractItemModel_virtualbase_multiData(const void* self, QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
bool QAbstractItemModel_override_virtual_submit(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_submit(void* self);
bool QAbstractItemModel_override_virtual_revert(void* self, intptr_t slot);
void QAbstractItemModel_virtualbase_revert(void* self);
bool QAbstractItemModel_override_virtual_resetInternalData(void* self, intptr_t slot);
void QAbstractItemModel_virtualbase_resetInternalData(void* self);
bool QAbstractItemModel_override_virtual_event(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_event(void* self, QEvent* event);
bool QAbstractItemModel_override_virtual_eventFilter(void* self, intptr_t slot);
bool QAbstractItemModel_virtualbase_eventFilter(void* self, QObject* watched, QEvent* event);
bool QAbstractItemModel_override_virtual_timerEvent(void* self, intptr_t slot);
void QAbstractItemModel_virtualbase_timerEvent(void* self, QTimerEvent* event);
bool QAbstractItemModel_override_virtual_childEvent(void* self, intptr_t slot);
void QAbstractItemModel_virtualbase_childEvent(void* self, QChildEvent* event);
bool QAbstractItemModel_override_virtual_customEvent(void* self, intptr_t slot);
void QAbstractItemModel_virtualbase_customEvent(void* self, QEvent* event);
bool QAbstractItemModel_override_virtual_connectNotify(void* self, intptr_t slot);
void QAbstractItemModel_virtualbase_connectNotify(void* self, QMetaMethod* signal);
bool QAbstractItemModel_override_virtual_disconnectNotify(void* self, intptr_t slot);
void QAbstractItemModel_virtualbase_disconnectNotify(void* self, QMetaMethod* signal);

QModelIndex* QAbstractItemModel_protectedbase_createIndex(bool* _dynamic_cast_ok, const void* self, int row, int column);
QModelIndex* QAbstractItemModel_protectedbase_createIndex2(bool* _dynamic_cast_ok, const void* self, int row, int column, uintptr_t id);
void QAbstractItemModel_protectedbase_encodeData(bool* _dynamic_cast_ok, const void* self, struct miqt_array /* of QModelIndex* */  indexes, QDataStream* stream);
bool QAbstractItemModel_protectedbase_decodeData(bool* _dynamic_cast_ok, void* self, int row, int column, QModelIndex* parent, QDataStream* stream);
void QAbstractItemModel_protectedbase_beginInsertRows(bool* _dynamic_cast_ok, void* self, QModelIndex* parent, int first, int last);
void QAbstractItemModel_protectedbase_endInsertRows(bool* _dynamic_cast_ok, void* self);
void QAbstractItemModel_protectedbase_beginRemoveRows(bool* _dynamic_cast_ok, void* self, QModelIndex* parent, int first, int last);
void QAbstractItemModel_protectedbase_endRemoveRows(bool* _dynamic_cast_ok, void* self);
bool QAbstractItemModel_protectedbase_beginMoveRows(bool* _dynamic_cast_ok, void* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationRow);
void QAbstractItemModel_protectedbase_endMoveRows(bool* _dynamic_cast_ok, void* self);
void QAbstractItemModel_protectedbase_beginInsertColumns(bool* _dynamic_cast_ok, void* self, QModelIndex* parent, int first, int last);
void QAbstractItemModel_protectedbase_endInsertColumns(bool* _dynamic_cast_ok, void* self);
void QAbstractItemModel_protectedbase_beginRemoveColumns(bool* _dynamic_cast_ok, void* self, QModelIndex* parent, int first, int last);
void QAbstractItemModel_protectedbase_endRemoveColumns(bool* _dynamic_cast_ok, void* self);
bool QAbstractItemModel_protectedbase_beginMoveColumns(bool* _dynamic_cast_ok, void* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationColumn);
void QAbstractItemModel_protectedbase_endMoveColumns(bool* _dynamic_cast_ok, void* self);
void QAbstractItemModel_protectedbase_beginResetModel(bool* _dynamic_cast_ok, void* self);
void QAbstractItemModel_protectedbase_endResetModel(bool* _dynamic_cast_ok, void* self);
void QAbstractItemModel_protectedbase_changePersistentIndex(bool* _dynamic_cast_ok, void* self, QModelIndex* from, QModelIndex* to);
void QAbstractItemModel_protectedbase_changePersistentIndexList(bool* _dynamic_cast_ok, void* self, struct miqt_array /* of QModelIndex* */  from, struct miqt_array /* of QModelIndex* */  to);
struct miqt_array /* of QModelIndex* */  QAbstractItemModel_protectedbase_persistentIndexList(bool* _dynamic_cast_ok, const void* self);
QModelIndex* QAbstractItemModel_protectedbase_createIndex3(bool* _dynamic_cast_ok, const void* self, int row, int column, const void* data);
QObject* QAbstractItemModel_protectedbase_sender(bool* _dynamic_cast_ok, const void* self);
int QAbstractItemModel_protectedbase_senderSignalIndex(bool* _dynamic_cast_ok, const void* self);
int QAbstractItemModel_protectedbase_receivers(bool* _dynamic_cast_ok, const void* self, const char* signal);
bool QAbstractItemModel_protectedbase_isSignalConnected(bool* _dynamic_cast_ok, const void* self, QMetaMethod* signal);

void QAbstractItemModel_connect_rowsAboutToBeInserted(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_rowsInserted(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_rowsAboutToBeRemoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_rowsRemoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_columnsAboutToBeInserted(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_columnsInserted(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_columnsAboutToBeRemoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_columnsRemoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_modelAboutToBeReset(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_modelReset(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_rowsAboutToBeMoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_rowsMoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_columnsAboutToBeMoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_connect_columnsMoved(QAbstractItemModel* self, intptr_t slot);

void QAbstractItemModel_delete(QAbstractItemModel* self);

QAbstractTableModel* QAbstractTableModel_new();
QAbstractTableModel* QAbstractTableModel_new2(QObject* parent);
void QAbstractTableModel_virtbase(QAbstractTableModel* src, QAbstractItemModel** outptr_QAbstractItemModel);
QMetaObject* QAbstractTableModel_metaObject(const QAbstractTableModel* self);
void* QAbstractTableModel_metacast(QAbstractTableModel* self, const char* param1);
struct miqt_string QAbstractTableModel_tr(const char* s);
QModelIndex* QAbstractTableModel_index(const QAbstractTableModel* self, int row, int column, QModelIndex* parent);
QModelIndex* QAbstractTableModel_sibling(const QAbstractTableModel* self, int row, int column, QModelIndex* idx);
bool QAbstractTableModel_dropMimeData(QAbstractTableModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QAbstractTableModel_flags(const QAbstractTableModel* self, QModelIndex* index);
struct miqt_string QAbstractTableModel_tr2(const char* s, const char* c);
struct miqt_string QAbstractTableModel_tr3(const char* s, const char* c, int n);

bool QAbstractTableModel_override_virtual_index(void* self, intptr_t slot);
QModelIndex* QAbstractTableModel_virtualbase_index(const void* self, int row, int column, QModelIndex* parent);
bool QAbstractTableModel_override_virtual_sibling(void* self, intptr_t slot);
QModelIndex* QAbstractTableModel_virtualbase_sibling(const void* self, int row, int column, QModelIndex* idx);
bool QAbstractTableModel_override_virtual_dropMimeData(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_dropMimeData(void* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
bool QAbstractTableModel_override_virtual_flags(void* self, intptr_t slot);
int QAbstractTableModel_virtualbase_flags(const void* self, QModelIndex* index);
bool QAbstractTableModel_override_virtual_rowCount(void* self, intptr_t slot);
int QAbstractTableModel_virtualbase_rowCount(const void* self, QModelIndex* parent);
bool QAbstractTableModel_override_virtual_columnCount(void* self, intptr_t slot);
int QAbstractTableModel_virtualbase_columnCount(const void* self, QModelIndex* parent);
bool QAbstractTableModel_override_virtual_data(void* self, intptr_t slot);
QVariant* QAbstractTableModel_virtualbase_data(const void* self, QModelIndex* index, int role);
bool QAbstractTableModel_override_virtual_setData(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_setData(void* self, QModelIndex* index, QVariant* value, int role);
bool QAbstractTableModel_override_virtual_headerData(void* self, intptr_t slot);
QVariant* QAbstractTableModel_virtualbase_headerData(const void* self, int section, int orientation, int role);
bool QAbstractTableModel_override_virtual_setHeaderData(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_setHeaderData(void* self, int section, int orientation, QVariant* value, int role);
bool QAbstractTableModel_override_virtual_itemData(void* self, intptr_t slot);
struct miqt_map /* of int to QVariant* */  QAbstractTableModel_virtualbase_itemData(const void* self, QModelIndex* index);
bool QAbstractTableModel_override_virtual_setItemData(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_setItemData(void* self, QModelIndex* index, struct miqt_map /* of int to QVariant* */  roles);
bool QAbstractTableModel_override_virtual_clearItemData(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_clearItemData(void* self, QModelIndex* index);
bool QAbstractTableModel_override_virtual_mimeTypes(void* self, intptr_t slot);
struct miqt_array /* of struct miqt_string */  QAbstractTableModel_virtualbase_mimeTypes(const void* self);
bool QAbstractTableModel_override_virtual_mimeData(void* self, intptr_t slot);
QMimeData* QAbstractTableModel_virtualbase_mimeData(const void* self, struct miqt_array /* of QModelIndex* */  indexes);
bool QAbstractTableModel_override_virtual_canDropMimeData(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_canDropMimeData(const void* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
bool QAbstractTableModel_override_virtual_supportedDropActions(void* self, intptr_t slot);
int QAbstractTableModel_virtualbase_supportedDropActions(const void* self);
bool QAbstractTableModel_override_virtual_supportedDragActions(void* self, intptr_t slot);
int QAbstractTableModel_virtualbase_supportedDragActions(const void* self);
bool QAbstractTableModel_override_virtual_insertRows(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_insertRows(void* self, int row, int count, QModelIndex* parent);
bool QAbstractTableModel_override_virtual_insertColumns(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_insertColumns(void* self, int column, int count, QModelIndex* parent);
bool QAbstractTableModel_override_virtual_removeRows(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_removeRows(void* self, int row, int count, QModelIndex* parent);
bool QAbstractTableModel_override_virtual_removeColumns(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_removeColumns(void* self, int column, int count, QModelIndex* parent);
bool QAbstractTableModel_override_virtual_moveRows(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_moveRows(void* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractTableModel_override_virtual_moveColumns(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_moveColumns(void* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractTableModel_override_virtual_fetchMore(void* self, intptr_t slot);
void QAbstractTableModel_virtualbase_fetchMore(void* self, QModelIndex* parent);
bool QAbstractTableModel_override_virtual_canFetchMore(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_canFetchMore(const void* self, QModelIndex* parent);
bool QAbstractTableModel_override_virtual_sort(void* self, intptr_t slot);
void QAbstractTableModel_virtualbase_sort(void* self, int column, int order);
bool QAbstractTableModel_override_virtual_buddy(void* self, intptr_t slot);
QModelIndex* QAbstractTableModel_virtualbase_buddy(const void* self, QModelIndex* index);
bool QAbstractTableModel_override_virtual_match(void* self, intptr_t slot);
struct miqt_array /* of QModelIndex* */  QAbstractTableModel_virtualbase_match(const void* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
bool QAbstractTableModel_override_virtual_span(void* self, intptr_t slot);
QSize* QAbstractTableModel_virtualbase_span(const void* self, QModelIndex* index);
bool QAbstractTableModel_override_virtual_roleNames(void* self, intptr_t slot);
struct miqt_map /* of int to struct miqt_string */  QAbstractTableModel_virtualbase_roleNames(const void* self);
bool QAbstractTableModel_override_virtual_multiData(void* self, intptr_t slot);
void QAbstractTableModel_virtualbase_multiData(const void* self, QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
bool QAbstractTableModel_override_virtual_submit(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_submit(void* self);
bool QAbstractTableModel_override_virtual_revert(void* self, intptr_t slot);
void QAbstractTableModel_virtualbase_revert(void* self);
bool QAbstractTableModel_override_virtual_resetInternalData(void* self, intptr_t slot);
void QAbstractTableModel_virtualbase_resetInternalData(void* self);
bool QAbstractTableModel_override_virtual_event(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_event(void* self, QEvent* event);
bool QAbstractTableModel_override_virtual_eventFilter(void* self, intptr_t slot);
bool QAbstractTableModel_virtualbase_eventFilter(void* self, QObject* watched, QEvent* event);
bool QAbstractTableModel_override_virtual_timerEvent(void* self, intptr_t slot);
void QAbstractTableModel_virtualbase_timerEvent(void* self, QTimerEvent* event);
bool QAbstractTableModel_override_virtual_childEvent(void* self, intptr_t slot);
void QAbstractTableModel_virtualbase_childEvent(void* self, QChildEvent* event);
bool QAbstractTableModel_override_virtual_customEvent(void* self, intptr_t slot);
void QAbstractTableModel_virtualbase_customEvent(void* self, QEvent* event);
bool QAbstractTableModel_override_virtual_connectNotify(void* self, intptr_t slot);
void QAbstractTableModel_virtualbase_connectNotify(void* self, QMetaMethod* signal);
bool QAbstractTableModel_override_virtual_disconnectNotify(void* self, intptr_t slot);
void QAbstractTableModel_virtualbase_disconnectNotify(void* self, QMetaMethod* signal);

QModelIndex* QAbstractTableModel_protectedbase_createIndex(bool* _dynamic_cast_ok, const void* self, int row, int column);
void QAbstractTableModel_protectedbase_encodeData(bool* _dynamic_cast_ok, const void* self, struct miqt_array /* of QModelIndex* */  indexes, QDataStream* stream);
bool QAbstractTableModel_protectedbase_decodeData(bool* _dynamic_cast_ok, void* self, int row, int column, QModelIndex* parent, QDataStream* stream);
void QAbstractTableModel_protectedbase_beginInsertRows(bool* _dynamic_cast_ok, void* self, QModelIndex* parent, int first, int last);
void QAbstractTableModel_protectedbase_endInsertRows(bool* _dynamic_cast_ok, void* self);
void QAbstractTableModel_protectedbase_beginRemoveRows(bool* _dynamic_cast_ok, void* self, QModelIndex* parent, int first, int last);
void QAbstractTableModel_protectedbase_endRemoveRows(bool* _dynamic_cast_ok, void* self);
bool QAbstractTableModel_protectedbase_beginMoveRows(bool* _dynamic_cast_ok, void* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationRow);
void QAbstractTableModel_protectedbase_endMoveRows(bool* _dynamic_cast_ok, void* self);
void QAbstractTableModel_protectedbase_beginInsertColumns(bool* _dynamic_cast_ok, void* self, QModelIndex* parent, int first, int last);
void QAbstractTableModel_protectedbase_endInsertColumns(bool* _dynamic_cast_ok, void* self);
void QAbstractTableModel_protectedbase_beginRemoveColumns(bool* _dynamic_cast_ok, void* self, QModelIndex* parent, int first, int last);
void QAbstractTableModel_protectedbase_endRemoveColumns(bool* _dynamic_cast_ok, void* self);
bool QAbstractTableModel_protectedbase_beginMoveColumns(bool* _dynamic_cast_ok, void* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationColumn);
void QAbstractTableModel_protectedbase_endMoveColumns(bool* _dynamic_cast_ok, void* self);
void QAbstractTableModel_protectedbase_beginResetModel(bool* _dynamic_cast_ok, void* self);
void QAbstractTableModel_protectedbase_endResetModel(bool* _dynamic_cast_ok, void* self);
void QAbstractTableModel_protectedbase_changePersistentIndex(bool* _dynamic_cast_ok, void* self, QModelIndex* from, QModelIndex* to);
void QAbstractTableModel_protectedbase_changePersistentIndexList(bool* _dynamic_cast_ok, void* self, struct miqt_array /* of QModelIndex* */  from, struct miqt_array /* of QModelIndex* */  to);
struct miqt_array /* of QModelIndex* */  QAbstractTableModel_protectedbase_persistentIndexList(bool* _dynamic_cast_ok, const void* self);
QObject* QAbstractTableModel_protectedbase_sender(bool* _dynamic_cast_ok, const void* self);
int QAbstractTableModel_protectedbase_senderSignalIndex(bool* _dynamic_cast_ok, const void* self);
int QAbstractTableModel_protectedbase_receivers(bool* _dynamic_cast_ok, const void* self, const char* signal);
bool QAbstractTableModel_protectedbase_isSignalConnected(bool* _dynamic_cast_ok, const void* self, QMetaMethod* signal);

void QAbstractTableModel_delete(QAbstractTableModel* self);

QAbstractListModel* QAbstractListModel_new();
QAbstractListModel* QAbstractListModel_new2(QObject* parent);
void QAbstractListModel_virtbase(QAbstractListModel* src, QAbstractItemModel** outptr_QAbstractItemModel);
QMetaObject* QAbstractListModel_metaObject(const QAbstractListModel* self);
void* QAbstractListModel_metacast(QAbstractListModel* self, const char* param1);
struct miqt_string QAbstractListModel_tr(const char* s);
QModelIndex* QAbstractListModel_index(const QAbstractListModel* self, int row, int column, QModelIndex* parent);
QModelIndex* QAbstractListModel_sibling(const QAbstractListModel* self, int row, int column, QModelIndex* idx);
bool QAbstractListModel_dropMimeData(QAbstractListModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QAbstractListModel_flags(const QAbstractListModel* self, QModelIndex* index);
struct miqt_string QAbstractListModel_tr2(const char* s, const char* c);
struct miqt_string QAbstractListModel_tr3(const char* s, const char* c, int n);

bool QAbstractListModel_override_virtual_index(void* self, intptr_t slot);
QModelIndex* QAbstractListModel_virtualbase_index(const void* self, int row, int column, QModelIndex* parent);
bool QAbstractListModel_override_virtual_sibling(void* self, intptr_t slot);
QModelIndex* QAbstractListModel_virtualbase_sibling(const void* self, int row, int column, QModelIndex* idx);
bool QAbstractListModel_override_virtual_dropMimeData(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_dropMimeData(void* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
bool QAbstractListModel_override_virtual_flags(void* self, intptr_t slot);
int QAbstractListModel_virtualbase_flags(const void* self, QModelIndex* index);
bool QAbstractListModel_override_virtual_rowCount(void* self, intptr_t slot);
int QAbstractListModel_virtualbase_rowCount(const void* self, QModelIndex* parent);
bool QAbstractListModel_override_virtual_data(void* self, intptr_t slot);
QVariant* QAbstractListModel_virtualbase_data(const void* self, QModelIndex* index, int role);
bool QAbstractListModel_override_virtual_setData(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_setData(void* self, QModelIndex* index, QVariant* value, int role);
bool QAbstractListModel_override_virtual_headerData(void* self, intptr_t slot);
QVariant* QAbstractListModel_virtualbase_headerData(const void* self, int section, int orientation, int role);
bool QAbstractListModel_override_virtual_setHeaderData(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_setHeaderData(void* self, int section, int orientation, QVariant* value, int role);
bool QAbstractListModel_override_virtual_itemData(void* self, intptr_t slot);
struct miqt_map /* of int to QVariant* */  QAbstractListModel_virtualbase_itemData(const void* self, QModelIndex* index);
bool QAbstractListModel_override_virtual_setItemData(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_setItemData(void* self, QModelIndex* index, struct miqt_map /* of int to QVariant* */  roles);
bool QAbstractListModel_override_virtual_clearItemData(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_clearItemData(void* self, QModelIndex* index);
bool QAbstractListModel_override_virtual_mimeTypes(void* self, intptr_t slot);
struct miqt_array /* of struct miqt_string */  QAbstractListModel_virtualbase_mimeTypes(const void* self);
bool QAbstractListModel_override_virtual_mimeData(void* self, intptr_t slot);
QMimeData* QAbstractListModel_virtualbase_mimeData(const void* self, struct miqt_array /* of QModelIndex* */  indexes);
bool QAbstractListModel_override_virtual_canDropMimeData(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_canDropMimeData(const void* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
bool QAbstractListModel_override_virtual_supportedDropActions(void* self, intptr_t slot);
int QAbstractListModel_virtualbase_supportedDropActions(const void* self);
bool QAbstractListModel_override_virtual_supportedDragActions(void* self, intptr_t slot);
int QAbstractListModel_virtualbase_supportedDragActions(const void* self);
bool QAbstractListModel_override_virtual_insertRows(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_insertRows(void* self, int row, int count, QModelIndex* parent);
bool QAbstractListModel_override_virtual_insertColumns(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_insertColumns(void* self, int column, int count, QModelIndex* parent);
bool QAbstractListModel_override_virtual_removeRows(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_removeRows(void* self, int row, int count, QModelIndex* parent);
bool QAbstractListModel_override_virtual_removeColumns(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_removeColumns(void* self, int column, int count, QModelIndex* parent);
bool QAbstractListModel_override_virtual_moveRows(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_moveRows(void* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractListModel_override_virtual_moveColumns(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_moveColumns(void* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractListModel_override_virtual_fetchMore(void* self, intptr_t slot);
void QAbstractListModel_virtualbase_fetchMore(void* self, QModelIndex* parent);
bool QAbstractListModel_override_virtual_canFetchMore(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_canFetchMore(const void* self, QModelIndex* parent);
bool QAbstractListModel_override_virtual_sort(void* self, intptr_t slot);
void QAbstractListModel_virtualbase_sort(void* self, int column, int order);
bool QAbstractListModel_override_virtual_buddy(void* self, intptr_t slot);
QModelIndex* QAbstractListModel_virtualbase_buddy(const void* self, QModelIndex* index);
bool QAbstractListModel_override_virtual_match(void* self, intptr_t slot);
struct miqt_array /* of QModelIndex* */  QAbstractListModel_virtualbase_match(const void* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
bool QAbstractListModel_override_virtual_span(void* self, intptr_t slot);
QSize* QAbstractListModel_virtualbase_span(const void* self, QModelIndex* index);
bool QAbstractListModel_override_virtual_roleNames(void* self, intptr_t slot);
struct miqt_map /* of int to struct miqt_string */  QAbstractListModel_virtualbase_roleNames(const void* self);
bool QAbstractListModel_override_virtual_multiData(void* self, intptr_t slot);
void QAbstractListModel_virtualbase_multiData(const void* self, QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
bool QAbstractListModel_override_virtual_submit(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_submit(void* self);
bool QAbstractListModel_override_virtual_revert(void* self, intptr_t slot);
void QAbstractListModel_virtualbase_revert(void* self);
bool QAbstractListModel_override_virtual_resetInternalData(void* self, intptr_t slot);
void QAbstractListModel_virtualbase_resetInternalData(void* self);
bool QAbstractListModel_override_virtual_event(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_event(void* self, QEvent* event);
bool QAbstractListModel_override_virtual_eventFilter(void* self, intptr_t slot);
bool QAbstractListModel_virtualbase_eventFilter(void* self, QObject* watched, QEvent* event);
bool QAbstractListModel_override_virtual_timerEvent(void* self, intptr_t slot);
void QAbstractListModel_virtualbase_timerEvent(void* self, QTimerEvent* event);
bool QAbstractListModel_override_virtual_childEvent(void* self, intptr_t slot);
void QAbstractListModel_virtualbase_childEvent(void* self, QChildEvent* event);
bool QAbstractListModel_override_virtual_customEvent(void* self, intptr_t slot);
void QAbstractListModel_virtualbase_customEvent(void* self, QEvent* event);
bool QAbstractListModel_override_virtual_connectNotify(void* self, intptr_t slot);
void QAbstractListModel_virtualbase_connectNotify(void* self, QMetaMethod* signal);
bool QAbstractListModel_override_virtual_disconnectNotify(void* self, intptr_t slot);
void QAbstractListModel_virtualbase_disconnectNotify(void* self, QMetaMethod* signal);

QModelIndex* QAbstractListModel_protectedbase_createIndex(bool* _dynamic_cast_ok, const void* self, int row, int column);
void QAbstractListModel_protectedbase_encodeData(bool* _dynamic_cast_ok, const void* self, struct miqt_array /* of QModelIndex* */  indexes, QDataStream* stream);
bool QAbstractListModel_protectedbase_decodeData(bool* _dynamic_cast_ok, void* self, int row, int column, QModelIndex* parent, QDataStream* stream);
void QAbstractListModel_protectedbase_beginInsertRows(bool* _dynamic_cast_ok, void* self, QModelIndex* parent, int first, int last);
void QAbstractListModel_protectedbase_endInsertRows(bool* _dynamic_cast_ok, void* self);
void QAbstractListModel_protectedbase_beginRemoveRows(bool* _dynamic_cast_ok, void* self, QModelIndex* parent, int first, int last);
void QAbstractListModel_protectedbase_endRemoveRows(bool* _dynamic_cast_ok, void* self);
bool QAbstractListModel_protectedbase_beginMoveRows(bool* _dynamic_cast_ok, void* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationRow);
void QAbstractListModel_protectedbase_endMoveRows(bool* _dynamic_cast_ok, void* self);
void QAbstractListModel_protectedbase_beginInsertColumns(bool* _dynamic_cast_ok, void* self, QModelIndex* parent, int first, int last);
void QAbstractListModel_protectedbase_endInsertColumns(bool* _dynamic_cast_ok, void* self);
void QAbstractListModel_protectedbase_beginRemoveColumns(bool* _dynamic_cast_ok, void* self, QModelIndex* parent, int first, int last);
void QAbstractListModel_protectedbase_endRemoveColumns(bool* _dynamic_cast_ok, void* self);
bool QAbstractListModel_protectedbase_beginMoveColumns(bool* _dynamic_cast_ok, void* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationColumn);
void QAbstractListModel_protectedbase_endMoveColumns(bool* _dynamic_cast_ok, void* self);
void QAbstractListModel_protectedbase_beginResetModel(bool* _dynamic_cast_ok, void* self);
void QAbstractListModel_protectedbase_endResetModel(bool* _dynamic_cast_ok, void* self);
void QAbstractListModel_protectedbase_changePersistentIndex(bool* _dynamic_cast_ok, void* self, QModelIndex* from, QModelIndex* to);
void QAbstractListModel_protectedbase_changePersistentIndexList(bool* _dynamic_cast_ok, void* self, struct miqt_array /* of QModelIndex* */  from, struct miqt_array /* of QModelIndex* */  to);
struct miqt_array /* of QModelIndex* */  QAbstractListModel_protectedbase_persistentIndexList(bool* _dynamic_cast_ok, const void* self);
QObject* QAbstractListModel_protectedbase_sender(bool* _dynamic_cast_ok, const void* self);
int QAbstractListModel_protectedbase_senderSignalIndex(bool* _dynamic_cast_ok, const void* self);
int QAbstractListModel_protectedbase_receivers(bool* _dynamic_cast_ok, const void* self, const char* signal);
bool QAbstractListModel_protectedbase_isSignalConnected(bool* _dynamic_cast_ok, const void* self, QMetaMethod* signal);

void QAbstractListModel_delete(QAbstractListModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
