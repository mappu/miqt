#pragma once
#ifndef MIQT_QT_GEN_QLISTVIEW_H
#define MIQT_QT_GEN_QLISTVIEW_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../libmiqt/libmiqt.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
class QAbstractItemModel;
class QAbstractItemView;
class QAbstractScrollArea;
class QActionEvent;
class QChildEvent;
class QCloseEvent;
class QContextMenuEvent;
class QDragEnterEvent;
class QDragLeaveEvent;
class QDragMoveEvent;
class QDropEvent;
class QEvent;
class QFocusEvent;
class QFrame;
class QHideEvent;
class QInputMethodEvent;
class QItemSelection;
class QItemSelectionModel;
class QKeyEvent;
class QListView;
class QMargins;
class QMetaMethod;
class QMetaObject;
class QModelIndex;
class QMouseEvent;
class QMoveEvent;
class QObject;
class QPaintDevice;
class QPaintEngine;
class QPaintEvent;
class QPainter;
class QPoint;
class QRect;
class QRegion;
class QResizeEvent;
class QShowEvent;
class QSize;
class QStyleOptionFrame;
class QStyleOptionViewItem;
class QTabletEvent;
class QTimerEvent;
class QVariant;
class QWheelEvent;
class QWidget;
#else
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractItemView QAbstractItemView;
typedef struct QAbstractScrollArea QAbstractScrollArea;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QFrame QFrame;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QItemSelection QItemSelection;
typedef struct QItemSelectionModel QItemSelectionModel;
typedef struct QKeyEvent QKeyEvent;
typedef struct QListView QListView;
typedef struct QMargins QMargins;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QModelIndex QModelIndex;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QRect QRect;
typedef struct QRegion QRegion;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionFrame QStyleOptionFrame;
typedef struct QStyleOptionViewItem QStyleOptionViewItem;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

QListView* QListView_new(QWidget* parent);
QListView* QListView_new2();
void QListView_virtbase(QListView* src, QAbstractItemView** outptr_QAbstractItemView);
QMetaObject* QListView_metaObject(const QListView* self);
void* QListView_metacast(QListView* self, const char* param1);
struct miqt_string QListView_tr(const char* s);
struct miqt_string QListView_trUtf8(const char* s);
void QListView_setMovement(QListView* self, int movement);
int QListView_movement(const QListView* self);
void QListView_setFlow(QListView* self, int flow);
int QListView_flow(const QListView* self);
void QListView_setWrapping(QListView* self, bool enable);
bool QListView_isWrapping(const QListView* self);
void QListView_setResizeMode(QListView* self, int mode);
int QListView_resizeMode(const QListView* self);
void QListView_setLayoutMode(QListView* self, int mode);
int QListView_layoutMode(const QListView* self);
void QListView_setSpacing(QListView* self, int space);
int QListView_spacing(const QListView* self);
void QListView_setBatchSize(QListView* self, int batchSize);
int QListView_batchSize(const QListView* self);
void QListView_setGridSize(QListView* self, QSize* size);
QSize* QListView_gridSize(const QListView* self);
void QListView_setViewMode(QListView* self, int mode);
int QListView_viewMode(const QListView* self);
void QListView_clearPropertyFlags(QListView* self);
bool QListView_isRowHidden(const QListView* self, int row);
void QListView_setRowHidden(QListView* self, int row, bool hide);
void QListView_setModelColumn(QListView* self, int column);
int QListView_modelColumn(const QListView* self);
void QListView_setUniformItemSizes(QListView* self, bool enable);
bool QListView_uniformItemSizes(const QListView* self);
void QListView_setWordWrap(QListView* self, bool on);
bool QListView_wordWrap(const QListView* self);
void QListView_setSelectionRectVisible(QListView* self, bool show);
bool QListView_isSelectionRectVisible(const QListView* self);
void QListView_setItemAlignment(QListView* self, int alignment);
int QListView_itemAlignment(const QListView* self);
QRect* QListView_visualRect(const QListView* self, QModelIndex* index);
void QListView_scrollTo(QListView* self, QModelIndex* index, int hint);
QModelIndex* QListView_indexAt(const QListView* self, QPoint* p);
void QListView_doItemsLayout(QListView* self);
void QListView_reset(QListView* self);
void QListView_setRootIndex(QListView* self, QModelIndex* index);
void QListView_indexesMoved(QListView* self, struct miqt_array /* of QModelIndex* */  indexes);
void QListView_connect_indexesMoved(QListView* self, intptr_t slot);
bool QListView_event(QListView* self, QEvent* e);
void QListView_scrollContentsBy(QListView* self, int dx, int dy);
void QListView_dataChanged(QListView* self, QModelIndex* topLeft, QModelIndex* bottomRight, struct miqt_array /* of int */  roles);
void QListView_rowsInserted(QListView* self, QModelIndex* parent, int start, int end);
void QListView_rowsAboutToBeRemoved(QListView* self, QModelIndex* parent, int start, int end);
void QListView_mouseMoveEvent(QListView* self, QMouseEvent* e);
void QListView_mouseReleaseEvent(QListView* self, QMouseEvent* e);
void QListView_wheelEvent(QListView* self, QWheelEvent* e);
void QListView_timerEvent(QListView* self, QTimerEvent* e);
void QListView_resizeEvent(QListView* self, QResizeEvent* e);
void QListView_dragMoveEvent(QListView* self, QDragMoveEvent* e);
void QListView_dragLeaveEvent(QListView* self, QDragLeaveEvent* e);
void QListView_dropEvent(QListView* self, QDropEvent* e);
void QListView_startDrag(QListView* self, int supportedActions);
QStyleOptionViewItem* QListView_viewOptions(const QListView* self);
void QListView_paintEvent(QListView* self, QPaintEvent* e);
int QListView_horizontalOffset(const QListView* self);
int QListView_verticalOffset(const QListView* self);
QModelIndex* QListView_moveCursor(QListView* self, int cursorAction, int modifiers);
void QListView_setSelection(QListView* self, QRect* rect, int command);
QRegion* QListView_visualRegionForSelection(const QListView* self, QItemSelection* selection);
struct miqt_array /* of QModelIndex* */  QListView_selectedIndexes(const QListView* self);
void QListView_updateGeometries(QListView* self);
bool QListView_isIndexHidden(const QListView* self, QModelIndex* index);
void QListView_selectionChanged(QListView* self, QItemSelection* selected, QItemSelection* deselected);
void QListView_currentChanged(QListView* self, QModelIndex* current, QModelIndex* previous);
QSize* QListView_viewportSizeHint(const QListView* self);
struct miqt_string QListView_tr2(const char* s, const char* c);
struct miqt_string QListView_tr3(const char* s, const char* c, int n);
struct miqt_string QListView_trUtf82(const char* s, const char* c);
struct miqt_string QListView_trUtf83(const char* s, const char* c, int n);

bool QListView_override_virtual_visualRect(void* self, intptr_t slot);
QRect* QListView_virtualbase_visualRect(const void* self, QModelIndex* index);
bool QListView_override_virtual_scrollTo(void* self, intptr_t slot);
void QListView_virtualbase_scrollTo(void* self, QModelIndex* index, int hint);
bool QListView_override_virtual_indexAt(void* self, intptr_t slot);
QModelIndex* QListView_virtualbase_indexAt(const void* self, QPoint* p);
bool QListView_override_virtual_doItemsLayout(void* self, intptr_t slot);
void QListView_virtualbase_doItemsLayout(void* self);
bool QListView_override_virtual_reset(void* self, intptr_t slot);
void QListView_virtualbase_reset(void* self);
bool QListView_override_virtual_setRootIndex(void* self, intptr_t slot);
void QListView_virtualbase_setRootIndex(void* self, QModelIndex* index);
bool QListView_override_virtual_event(void* self, intptr_t slot);
bool QListView_virtualbase_event(void* self, QEvent* e);
bool QListView_override_virtual_scrollContentsBy(void* self, intptr_t slot);
void QListView_virtualbase_scrollContentsBy(void* self, int dx, int dy);
bool QListView_override_virtual_dataChanged(void* self, intptr_t slot);
void QListView_virtualbase_dataChanged(void* self, QModelIndex* topLeft, QModelIndex* bottomRight, struct miqt_array /* of int */  roles);
bool QListView_override_virtual_rowsInserted(void* self, intptr_t slot);
void QListView_virtualbase_rowsInserted(void* self, QModelIndex* parent, int start, int end);
bool QListView_override_virtual_rowsAboutToBeRemoved(void* self, intptr_t slot);
void QListView_virtualbase_rowsAboutToBeRemoved(void* self, QModelIndex* parent, int start, int end);
bool QListView_override_virtual_mouseMoveEvent(void* self, intptr_t slot);
void QListView_virtualbase_mouseMoveEvent(void* self, QMouseEvent* e);
bool QListView_override_virtual_mouseReleaseEvent(void* self, intptr_t slot);
void QListView_virtualbase_mouseReleaseEvent(void* self, QMouseEvent* e);
bool QListView_override_virtual_wheelEvent(void* self, intptr_t slot);
void QListView_virtualbase_wheelEvent(void* self, QWheelEvent* e);
bool QListView_override_virtual_timerEvent(void* self, intptr_t slot);
void QListView_virtualbase_timerEvent(void* self, QTimerEvent* e);
bool QListView_override_virtual_resizeEvent(void* self, intptr_t slot);
void QListView_virtualbase_resizeEvent(void* self, QResizeEvent* e);
bool QListView_override_virtual_dragMoveEvent(void* self, intptr_t slot);
void QListView_virtualbase_dragMoveEvent(void* self, QDragMoveEvent* e);
bool QListView_override_virtual_dragLeaveEvent(void* self, intptr_t slot);
void QListView_virtualbase_dragLeaveEvent(void* self, QDragLeaveEvent* e);
bool QListView_override_virtual_dropEvent(void* self, intptr_t slot);
void QListView_virtualbase_dropEvent(void* self, QDropEvent* e);
bool QListView_override_virtual_startDrag(void* self, intptr_t slot);
void QListView_virtualbase_startDrag(void* self, int supportedActions);
bool QListView_override_virtual_viewOptions(void* self, intptr_t slot);
QStyleOptionViewItem* QListView_virtualbase_viewOptions(const void* self);
bool QListView_override_virtual_paintEvent(void* self, intptr_t slot);
void QListView_virtualbase_paintEvent(void* self, QPaintEvent* e);
bool QListView_override_virtual_horizontalOffset(void* self, intptr_t slot);
int QListView_virtualbase_horizontalOffset(const void* self);
bool QListView_override_virtual_verticalOffset(void* self, intptr_t slot);
int QListView_virtualbase_verticalOffset(const void* self);
bool QListView_override_virtual_moveCursor(void* self, intptr_t slot);
QModelIndex* QListView_virtualbase_moveCursor(void* self, int cursorAction, int modifiers);
bool QListView_override_virtual_setSelection(void* self, intptr_t slot);
void QListView_virtualbase_setSelection(void* self, QRect* rect, int command);
bool QListView_override_virtual_visualRegionForSelection(void* self, intptr_t slot);
QRegion* QListView_virtualbase_visualRegionForSelection(const void* self, QItemSelection* selection);
bool QListView_override_virtual_selectedIndexes(void* self, intptr_t slot);
struct miqt_array /* of QModelIndex* */  QListView_virtualbase_selectedIndexes(const void* self);
bool QListView_override_virtual_updateGeometries(void* self, intptr_t slot);
void QListView_virtualbase_updateGeometries(void* self);
bool QListView_override_virtual_isIndexHidden(void* self, intptr_t slot);
bool QListView_virtualbase_isIndexHidden(const void* self, QModelIndex* index);
bool QListView_override_virtual_selectionChanged(void* self, intptr_t slot);
void QListView_virtualbase_selectionChanged(void* self, QItemSelection* selected, QItemSelection* deselected);
bool QListView_override_virtual_currentChanged(void* self, intptr_t slot);
void QListView_virtualbase_currentChanged(void* self, QModelIndex* current, QModelIndex* previous);
bool QListView_override_virtual_viewportSizeHint(void* self, intptr_t slot);
QSize* QListView_virtualbase_viewportSizeHint(const void* self);
bool QListView_override_virtual_setModel(void* self, intptr_t slot);
void QListView_virtualbase_setModel(void* self, QAbstractItemModel* model);
bool QListView_override_virtual_setSelectionModel(void* self, intptr_t slot);
void QListView_virtualbase_setSelectionModel(void* self, QItemSelectionModel* selectionModel);
bool QListView_override_virtual_keyboardSearch(void* self, intptr_t slot);
void QListView_virtualbase_keyboardSearch(void* self, struct miqt_string search);
bool QListView_override_virtual_sizeHintForRow(void* self, intptr_t slot);
int QListView_virtualbase_sizeHintForRow(const void* self, int row);
bool QListView_override_virtual_sizeHintForColumn(void* self, intptr_t slot);
int QListView_virtualbase_sizeHintForColumn(const void* self, int column);
bool QListView_override_virtual_inputMethodQuery(void* self, intptr_t slot);
QVariant* QListView_virtualbase_inputMethodQuery(const void* self, int query);
bool QListView_override_virtual_selectAll(void* self, intptr_t slot);
void QListView_virtualbase_selectAll(void* self);
bool QListView_override_virtual_updateEditorData(void* self, intptr_t slot);
void QListView_virtualbase_updateEditorData(void* self);
bool QListView_override_virtual_updateEditorGeometries(void* self, intptr_t slot);
void QListView_virtualbase_updateEditorGeometries(void* self);
bool QListView_override_virtual_verticalScrollbarAction(void* self, intptr_t slot);
void QListView_virtualbase_verticalScrollbarAction(void* self, int action);
bool QListView_override_virtual_horizontalScrollbarAction(void* self, intptr_t slot);
void QListView_virtualbase_horizontalScrollbarAction(void* self, int action);
bool QListView_override_virtual_verticalScrollbarValueChanged(void* self, intptr_t slot);
void QListView_virtualbase_verticalScrollbarValueChanged(void* self, int value);
bool QListView_override_virtual_horizontalScrollbarValueChanged(void* self, intptr_t slot);
void QListView_virtualbase_horizontalScrollbarValueChanged(void* self, int value);
bool QListView_override_virtual_closeEditor(void* self, intptr_t slot);
void QListView_virtualbase_closeEditor(void* self, QWidget* editor, int hint);
bool QListView_override_virtual_commitData(void* self, intptr_t slot);
void QListView_virtualbase_commitData(void* self, QWidget* editor);
bool QListView_override_virtual_editorDestroyed(void* self, intptr_t slot);
void QListView_virtualbase_editorDestroyed(void* self, QObject* editor);
bool QListView_override_virtual_edit2(void* self, intptr_t slot);
bool QListView_virtualbase_edit2(void* self, QModelIndex* index, int trigger, QEvent* event);
bool QListView_override_virtual_selectionCommand(void* self, intptr_t slot);
int QListView_virtualbase_selectionCommand(const void* self, QModelIndex* index, QEvent* event);
bool QListView_override_virtual_focusNextPrevChild(void* self, intptr_t slot);
bool QListView_virtualbase_focusNextPrevChild(void* self, bool next);
bool QListView_override_virtual_viewportEvent(void* self, intptr_t slot);
bool QListView_virtualbase_viewportEvent(void* self, QEvent* event);
bool QListView_override_virtual_mousePressEvent(void* self, intptr_t slot);
void QListView_virtualbase_mousePressEvent(void* self, QMouseEvent* event);
bool QListView_override_virtual_mouseDoubleClickEvent(void* self, intptr_t slot);
void QListView_virtualbase_mouseDoubleClickEvent(void* self, QMouseEvent* event);
bool QListView_override_virtual_dragEnterEvent(void* self, intptr_t slot);
void QListView_virtualbase_dragEnterEvent(void* self, QDragEnterEvent* event);
bool QListView_override_virtual_focusInEvent(void* self, intptr_t slot);
void QListView_virtualbase_focusInEvent(void* self, QFocusEvent* event);
bool QListView_override_virtual_focusOutEvent(void* self, intptr_t slot);
void QListView_virtualbase_focusOutEvent(void* self, QFocusEvent* event);
bool QListView_override_virtual_keyPressEvent(void* self, intptr_t slot);
void QListView_virtualbase_keyPressEvent(void* self, QKeyEvent* event);
bool QListView_override_virtual_inputMethodEvent(void* self, intptr_t slot);
void QListView_virtualbase_inputMethodEvent(void* self, QInputMethodEvent* event);
bool QListView_override_virtual_eventFilter(void* self, intptr_t slot);
bool QListView_virtualbase_eventFilter(void* self, QObject* object, QEvent* event);
bool QListView_override_virtual_minimumSizeHint(void* self, intptr_t slot);
QSize* QListView_virtualbase_minimumSizeHint(const void* self);
bool QListView_override_virtual_sizeHint(void* self, intptr_t slot);
QSize* QListView_virtualbase_sizeHint(const void* self);
bool QListView_override_virtual_setupViewport(void* self, intptr_t slot);
void QListView_virtualbase_setupViewport(void* self, QWidget* viewport);
bool QListView_override_virtual_contextMenuEvent(void* self, intptr_t slot);
void QListView_virtualbase_contextMenuEvent(void* self, QContextMenuEvent* param1);
bool QListView_override_virtual_changeEvent(void* self, intptr_t slot);
void QListView_virtualbase_changeEvent(void* self, QEvent* param1);
bool QListView_override_virtual_devType(void* self, intptr_t slot);
int QListView_virtualbase_devType(const void* self);
bool QListView_override_virtual_setVisible(void* self, intptr_t slot);
void QListView_virtualbase_setVisible(void* self, bool visible);
bool QListView_override_virtual_heightForWidth(void* self, intptr_t slot);
int QListView_virtualbase_heightForWidth(const void* self, int param1);
bool QListView_override_virtual_hasHeightForWidth(void* self, intptr_t slot);
bool QListView_virtualbase_hasHeightForWidth(const void* self);
bool QListView_override_virtual_paintEngine(void* self, intptr_t slot);
QPaintEngine* QListView_virtualbase_paintEngine(const void* self);
bool QListView_override_virtual_keyReleaseEvent(void* self, intptr_t slot);
void QListView_virtualbase_keyReleaseEvent(void* self, QKeyEvent* event);
bool QListView_override_virtual_enterEvent(void* self, intptr_t slot);
void QListView_virtualbase_enterEvent(void* self, QEvent* event);
bool QListView_override_virtual_leaveEvent(void* self, intptr_t slot);
void QListView_virtualbase_leaveEvent(void* self, QEvent* event);
bool QListView_override_virtual_moveEvent(void* self, intptr_t slot);
void QListView_virtualbase_moveEvent(void* self, QMoveEvent* event);
bool QListView_override_virtual_closeEvent(void* self, intptr_t slot);
void QListView_virtualbase_closeEvent(void* self, QCloseEvent* event);
bool QListView_override_virtual_tabletEvent(void* self, intptr_t slot);
void QListView_virtualbase_tabletEvent(void* self, QTabletEvent* event);
bool QListView_override_virtual_actionEvent(void* self, intptr_t slot);
void QListView_virtualbase_actionEvent(void* self, QActionEvent* event);
bool QListView_override_virtual_showEvent(void* self, intptr_t slot);
void QListView_virtualbase_showEvent(void* self, QShowEvent* event);
bool QListView_override_virtual_hideEvent(void* self, intptr_t slot);
void QListView_virtualbase_hideEvent(void* self, QHideEvent* event);
bool QListView_override_virtual_nativeEvent(void* self, intptr_t slot);
bool QListView_virtualbase_nativeEvent(void* self, struct miqt_string eventType, void* message, long* result);
bool QListView_override_virtual_metric(void* self, intptr_t slot);
int QListView_virtualbase_metric(const void* self, int param1);
bool QListView_override_virtual_initPainter(void* self, intptr_t slot);
void QListView_virtualbase_initPainter(const void* self, QPainter* painter);
bool QListView_override_virtual_redirected(void* self, intptr_t slot);
QPaintDevice* QListView_virtualbase_redirected(const void* self, QPoint* offset);
bool QListView_override_virtual_sharedPainter(void* self, intptr_t slot);
QPainter* QListView_virtualbase_sharedPainter(const void* self);
bool QListView_override_virtual_childEvent(void* self, intptr_t slot);
void QListView_virtualbase_childEvent(void* self, QChildEvent* event);
bool QListView_override_virtual_customEvent(void* self, intptr_t slot);
void QListView_virtualbase_customEvent(void* self, QEvent* event);
bool QListView_override_virtual_connectNotify(void* self, intptr_t slot);
void QListView_virtualbase_connectNotify(void* self, QMetaMethod* signal);
bool QListView_override_virtual_disconnectNotify(void* self, intptr_t slot);
void QListView_virtualbase_disconnectNotify(void* self, QMetaMethod* signal);

void QListView_protectedbase_resizeContents(bool* _dynamic_cast_ok, void* self, int width, int height);
QSize* QListView_protectedbase_contentsSize(bool* _dynamic_cast_ok, const void* self);
QRect* QListView_protectedbase_rectForIndex(bool* _dynamic_cast_ok, const void* self, QModelIndex* index);
void QListView_protectedbase_setPositionForIndex(bool* _dynamic_cast_ok, void* self, QPoint* position, QModelIndex* index);
void QListView_protectedbase_setHorizontalStepsPerItem(bool* _dynamic_cast_ok, void* self, int steps);
int QListView_protectedbase_horizontalStepsPerItem(bool* _dynamic_cast_ok, const void* self);
void QListView_protectedbase_setVerticalStepsPerItem(bool* _dynamic_cast_ok, void* self, int steps);
int QListView_protectedbase_verticalStepsPerItem(bool* _dynamic_cast_ok, const void* self);
int QListView_protectedbase_state(bool* _dynamic_cast_ok, const void* self);
void QListView_protectedbase_setState(bool* _dynamic_cast_ok, void* self, int state);
void QListView_protectedbase_scheduleDelayedItemsLayout(bool* _dynamic_cast_ok, void* self);
void QListView_protectedbase_executeDelayedItemsLayout(bool* _dynamic_cast_ok, void* self);
void QListView_protectedbase_setDirtyRegion(bool* _dynamic_cast_ok, void* self, QRegion* region);
void QListView_protectedbase_scrollDirtyRegion(bool* _dynamic_cast_ok, void* self, int dx, int dy);
QPoint* QListView_protectedbase_dirtyRegionOffset(bool* _dynamic_cast_ok, const void* self);
void QListView_protectedbase_startAutoScroll(bool* _dynamic_cast_ok, void* self);
void QListView_protectedbase_stopAutoScroll(bool* _dynamic_cast_ok, void* self);
void QListView_protectedbase_doAutoScroll(bool* _dynamic_cast_ok, void* self);
int QListView_protectedbase_dropIndicatorPosition(bool* _dynamic_cast_ok, const void* self);
void QListView_protectedbase_setViewportMargins(bool* _dynamic_cast_ok, void* self, int left, int top, int right, int bottom);
QMargins* QListView_protectedbase_viewportMargins(bool* _dynamic_cast_ok, const void* self);
void QListView_protectedbase_drawFrame(bool* _dynamic_cast_ok, void* self, QPainter* param1);
void QListView_protectedbase_initStyleOption(bool* _dynamic_cast_ok, const void* self, QStyleOptionFrame* option);
void QListView_protectedbase_updateMicroFocus(bool* _dynamic_cast_ok, void* self);
void QListView_protectedbase_create(bool* _dynamic_cast_ok, void* self);
void QListView_protectedbase_destroy(bool* _dynamic_cast_ok, void* self);
bool QListView_protectedbase_focusNextChild(bool* _dynamic_cast_ok, void* self);
bool QListView_protectedbase_focusPreviousChild(bool* _dynamic_cast_ok, void* self);
QObject* QListView_protectedbase_sender(bool* _dynamic_cast_ok, const void* self);
int QListView_protectedbase_senderSignalIndex(bool* _dynamic_cast_ok, const void* self);
int QListView_protectedbase_receivers(bool* _dynamic_cast_ok, const void* self, const char* signal);
bool QListView_protectedbase_isSignalConnected(bool* _dynamic_cast_ok, const void* self, QMetaMethod* signal);

void QListView_delete(QListView* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
